
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version "${moddevgradle_version}"
    id 'io.github.0ffz.github-packages' version '[1,2)'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = "${project.mc_version}-${project.mod_version}"
group = "io.github.razordevs.${project.mod_id}"

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.INFO
        }

        client {
            client()
            systemProperty 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            server()
            systemProperty 'forge.enabledGameTestNamespaces', mod_id
            programArgument '--nogui'
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing', file('src/generated/resources/').getAbsolutePath(), '--existing-mod', 'nitrogen_internals', '--existing-mod', 'cumulus_menus', '--existing-mod', 'aether'
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    //Aether Dependencies
    implementation("com.aetherteam.aether:aether:${project.aether_version}")
    implementation("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
    implementation("io.wispforest:accessories-neoforge:${project.accessories_version}+${project.mc_version}")
    compileOnly("me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}")

    //Included Dependencies
    implementation("com.github.razordevs:aeroblender:${project.aeroblender_version}")
    jarJar("com.github.razordevs:aeroblender:${project.aeroblender_version}") {
        version {
            strictly "[${project.aeroblender_version},)"
            prefer "${project.aeroblender_version}"
        }
    }
    implementation("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}")
    jarJar("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}") {
        version {
            strictly "[${project.terrablender_version},)"
            prefer "${project.terrablender_version}"
        }
    }
    implementation "net.zepalesque.unity:aether_unity:${project.mc_version}-${project.unity_version}-neoforge"
    jarJar("net.zepalesque.unity:aether_unity:${project.mc_version}-${project.unity_version}-neoforge") {
        version {
            strictly "[${project.mc_version}-${project.unity_version},)"
            prefer "${project.mc_version}-${project.unity_version}"
        }
    }

    // Unity Dependency
    implementation "net.zepalesque.zenith:zenith:${project.mc_version}-${zenith_version}-neoforge"
    jarJar("net.zepalesque.zenith:zenith:${project.mc_version}-${project.zenith_version}-neoforge") {
        version {
            strictly "[${project.mc_version}-${project.zenith_version},)"
            prefer "${project.mc_version}-${project.zenith_version}"
        }
    }

    //Optional Dependencies
    compileOnly("mezz.jei:jei-${project.mc_version}-common-api:${project.jei_version}")
    compileOnly("mezz.jei:jei-${project.mc_version}-neoforge:${project.jei_version}")
}

repositories {
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("The-Aether-Team/Protect-Your-Moa")
    maven githubPackage.invoke("Zepalesque/The-Aether-Unity")
    maven githubPackage.invoke("Zepalesque/Zenith")
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = "https://maven.wispforest.io" }
    maven { url = "https://maven.wispforest.io/releases" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://jitpack.io" }
    maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/maven"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'libs'
    }
    mavenCentral()
}



publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}


var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            mod_license            : mod_license,
            mod_url                : mod_url,
            mod_update             : mod_update,
            mod_tracker            : mod_tracker,
            mod_credits            : mod_credits,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            mc_version             : mc_version,
            mc_version_range       : mc_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.compilerArgs << "-Xmaxerrs" << "9000"
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

compileJava {
    options.incremental = false
}

build {
    dependsOn 'jarJar'
}
